-- Copyright (C) 2024  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 23.1std.1 Build 993 05/14/2024 SC Lite Edition"
-- CREATED		"Sat Jan  4 22:23:31 2025"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY reklama IS 
	PORT
	(
		clk_in :  IN  STD_LOGIC;
		seg1 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		seg2 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		seg3 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		seg4 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		seg5 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		seg6 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END reklama;

ARCHITECTURE bdf_type OF reklama IS 

COMPONENT licznik
	PORT(clk : IN STD_LOGIC;
		 Q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;

COMPONENT preskaler
	PORT(clk : IN STD_LOGIC;
		 clk1Hz : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT msg
	PORT(A : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 Q : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;

COMPONENT znakseg7
	PORT(A : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
		 SEG : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

COMPONENT rejestr
	PORT(clk : IN STD_LOGIC;
		 EN : IN STD_LOGIC;
		 D : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
		 Q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_20 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_21 :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_22 :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_23 :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_24 :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_25 :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_6 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_9 :  STD_LOGIC_VECTOR(6 DOWNTO 0);


BEGIN 



b2v_inst : licznik
PORT MAP(clk => SYNTHESIZED_WIRE_20,
		 Q => SYNTHESIZED_WIRE_6);


b2v_inst1 : preskaler
PORT MAP(clk => clk_in,
		 clk1Hz => SYNTHESIZED_WIRE_20);


seg1 <= NOT(SYNTHESIZED_WIRE_21);



seg2 <= NOT(SYNTHESIZED_WIRE_22);



seg3 <= NOT(SYNTHESIZED_WIRE_23);



seg4 <= NOT(SYNTHESIZED_WIRE_24);



seg5 <= NOT(SYNTHESIZED_WIRE_25);



b2v_inst2 : msg
PORT MAP(A => SYNTHESIZED_WIRE_6,
		 Q => SYNTHESIZED_WIRE_7);


b2v_inst3 : znakseg7
PORT MAP(A => SYNTHESIZED_WIRE_7,
		 SEG => SYNTHESIZED_WIRE_9);


b2v_inst4 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_9,
		 Q => SYNTHESIZED_WIRE_21);


b2v_inst5 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_21,
		 Q => SYNTHESIZED_WIRE_22);


b2v_inst6 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_22,
		 Q => SYNTHESIZED_WIRE_23);


b2v_inst7 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_23,
		 Q => SYNTHESIZED_WIRE_24);


b2v_inst8 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_24,
		 Q => SYNTHESIZED_WIRE_25);


b2v_inst9 : rejestr
PORT MAP(clk => clk_in,
		 EN => SYNTHESIZED_WIRE_20,
		 D => SYNTHESIZED_WIRE_25,
		 Q => seg6);


END bdf_type;